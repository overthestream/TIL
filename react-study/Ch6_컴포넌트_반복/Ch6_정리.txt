# 코드가 반복될 때 
  > JS 배열의 map() 함수
    map 함수로 반복되는 컴포넌트를 렌더링 가능 
    map 함수는 파라미터로 전달된 함수를 사용해서 배열 내 각 요소를 원하는 규칙에 따라 반환 후 그 결과로 새로운 배열을 생성 
    문법 : arr.map(callback, [thisArg])
      callback: 새로운 배열의 요소를 생성하는 함수, 파라미터로 
        > currentValue: 현재 처리중인 요소
        > index: 현재 처리하고 있는 요소의 index 값
        > array: 현재 처리중인 원본 배열 
      thisArg: callback 함수 내부에서 사용할 this 레퍼런스 
      ex>
        var numbers = [1, 2, 3, 4, 5]

        var processed = numbers.map(function(num){
          return num*num
        })

        processed === [1, 4, 9, 16, 25]
  > 데이터 배열을 컴포넌트 배열로 변환하기 
      ex>
        const IterationSample = () => {
          const names = ['snowMan', 'ice', 'snow', 'wind']
          const nameList = names.map(name => <li>{name}</li>)
          return <ul>{nameList}</ul>
        } 
      -> 이건 key가 없다.
        key는 컴포넌트 배열을 렌더링 했을 때 어떤 원소에 변동이 있었는지 알아내려고 사용
        유동적인 데이터를 다룰 때는 원소를 새로 생성할 수도, 제거할 수도, 수정할 수도 있다
        여기서 key가 없다면 virtual DOM 비교시 모두 순차적으로 비교하며 변화 감지
        but key가 있따면 이 값으로 더욱 빠르게 알아낼 수 있다.

        # key 설정 
          map 함수의 인자로 전달되는 함수 내부에서 컴포넌트의 props를 설정하듯이 
            ex>
              const articleList = articles.map(article => 
                  <Article
                    title = {article.title}
                    writer = {article.writer}
                    key = {article.id}
                  />
              )
            or
              const IterationSample = () => {
                const names = ['snowMan', 'ice', 'snow', 'wind']
                const nameList = names.map(name => <li key = {index}>{name}</li>)
                return <ul>{nameList}</ul>
              }
            고유값이 없을때만 index를 key로 사용하라. index를 key로 사용 시 배열이 변경될 때 효율적인 리렌더링이 불가 
              -> 고윳값 억지로 추가 가능 : useState 시 초기 값의 객체에 id를 설정해서 넘겨 ex useState([{id: 1, text: 'snowMan'}]) 이런 식으로.key = .id 로 사용
              
