b함수형 컴포넌트에서 여러 작업을 지원 
useState -> Ch3 
useEffect : 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 할 수 있음 
  : componentDidMount + componentDidUpdate 느낌 
  : 마운트될 때만 실행하게 하려면 : 두번쨰 파라미터로 [] 넣어주면 됨 
  : 업데이트될 때만 실행하게 하려면 : 검사 값을 두번째 파라미터의 [] 안에 넣어주기 
  클린 업 함수 : 언마운트 전이나 업데이트 전에 작업 실행 : useEffect의 return 값으로 넣어 준 함수 
useReducer : useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트 
  리듀서는 현재 상태, 그리고 업데이트를 위해 필요한 정보를 담은 액션 값을 전달받아 새로운 상태를 반환하는 함수 
  리듀서 함수에서 새로운 상태를 만들 때는 반드시 불변성을 지켜주어야 함 
  ex Counter.js =>
    function reducer(state, action) {
      switch(action.type) {
        case 'INCREMENT' :
          return{value: state.value+1}
        case 'DECREMENT' :
          return{value: state.value-1}
        default : 
          return state
      }
    }
    const Counter = () => {
      const [state, dipatch] = useReducer(reducer, { value: 0})
      (...)
      <button onClick={()=>dispatch({type: 'INCREMENT})}>+1</button>
      (...)
    }
useMemo : 함수형 컴포넌트 내부의 연산 최적화 
useCallback : 이벤트 핸들러 함수 최적화
useRef : ref 
