# 그래서 프레임 워크가 뭔데?
   소프트웨어 프레임워크(software framework)는 복잡한 문제를 해결하거나 서술하는 데 사용되는 기본 개념 구조이다. 간단히 뼈대, 골조(骨組), 프레임워크(framework)라고도 한다.
   자바스크립트 프레임워크(JavaScript framework)는 자바스크립트로 작성된 애플리케이션 프레임워크이다. 
   제어 흐름 관점에서 자바스크립트 라이브러리와는 구별한다. 
   라이브러리는 부모 코드에 의해 호출될 함수들을 제공하는 반면 프레임워크는 애플리케이션 디자인 전반을 정의한다.

# 자바스크립트 프레임 워크?
   보통 모델과 뷰로 이루어져 있다.
   모델은 애플리케이션에서 사용하는 데이터를 관리하는 영역,
   뷰는 사용자에게 보이는 부분 
   -> 프로그램이 어떤 작업을 수행할 때, 모델 속의 데이터가 조회되고, 수정된 후 이 변경 사항을 뷰에 반영함 

# 그래서 왜 리액트 쓰는데?
   데이터 변형 시 뷰에 그것을 반영할 때, 작업은 간단하지만 애플리케이셔 규모가 크면 복잡하고, 성능이 떨어질 위험 존재
   그래서 해결 방안 : 데이터(모델)이 변할 때마다 변화를 주는 것이 아니라 그냥 기존 뷰를 날려버리고 새로 렌더링
      -> 애플리케이션 구조가 간단해지고, 작성해야 할 코드 양도 줄어듦. 
      -> 어떻게 변화를 줄지 신경 쓰지 않고, 그저 뷰가 어떻게 생길지 선언하고, 데이터에 변화가 있으면 새롭게 렌더링하면 된다 

# 리액트가 뭔데?
   리액트는 JS 라이브러리로 사용자 인터페이스(UI)를 만드는 데 사용
   모델이 따로 없고 오직 뷰만 신경씀 
   리액트에는 특정 부분이 어떻게 생길지 정하는 선언체가 있는데, 이것이 컴포넌트 
   컴포넌트는 재사용이 가능한 API로 수많은 기능이 있고, 컴포넌트 하나에서 해당 컴포넌트의 생김새와 작동방식을 정의 
   # 안 끊기고 렌더링이 가능한 이유 ??
      초기 렌더링 + 데이터 변경으로 다시 실행되는 리렌더링
      초기 렌더링 : render 함수 
         : 컴포넌트가 어떻게 생겼는지 정의
         : html 형식의 문자열이 아닌, 뷰가 어떻게 생겼고 어떻게 작용하는지에 대한 정보를 지닌 객체 반환 
         : 컴포넌트 내부에는 또다른 컴포넌트들이 들어갈 수 있는데, 이 때 render 함수 실행 시 그 내부에 있는 컴포넌트도 재귀적으로 렌더링 
         : 최상위 컴포넌트의 렌더링이 끝나면 해당 정보들로 HTML 마크업을 만들고 이를 페이지의 DOM 요소 안에 주입
         정리 : render(최상위컴포넌트 -> 내부 컴포넌트 ... 모두) -> HTML 마크업 -> DOM -> 페이지   
      뷰 업데이트 : 조화 과정(reconciliation)
         데이터 변화 시 뷰를 변형하는 것이 아니라 새로운 요소로 갈아끼움 
         render 함수가 알아서 해줌 (새로운 데이터로 render 함수를 또 다시 호출) -> 새로운 뷰를 생성하겠죠?
            -> 곧바로 DOM에 반영하는 것이 아니라, 이전의 render 함수가 만들었던 컴포넌트 정보와 현재 render 함수가 만든 컴포넌트 정보를 비교하여, 최소한의 연산으로 DOM 트리를 업데이트
         즉, 새롭게 render 해서 바뀐 부분만 업데이트 한다는 것

# Virtual DOM
   DOM = Document Object Model : 객체로 문서 구조를 표현하는 방법, HTML or XML 문서로 작성 
   웹 브라우저는 DOM을 활용하여 객체에 자바스크립트와 CSS를 적용함 
   DOM은 트리 형태라서 특정 노드를 찾기, 수정, 제거, 삽입이 가능 
   ex) HTML의 DOM 트리
                        HTML
                  head        body
         title meta script    h1 p  ul
   But DOM은 동적 UI에서 최적화되어있지 않다 -> 아까 말한, 모델에 따라 뷰를 업데이트 할 때 느려질 수 있다는 것
   (HTML은 자체적으로 정적인데, JS를 이용하면 동적으로 만들 수 있다.)
   리액트는 Virtual DOM 방식으로 DOM 업데이트(뷰 업데이트가 느린 부분)를 추상화하여 DOM 처리 횟수를 최소화하고, 효율적으로 진행 
   실제 DOM에 접근하여 조작하는 대신, 이를 추상화한 자바스크립트 객체를 구성하여 사용 (DOM의 가벼운 사본과 비슷)
   리액트가 데이터가 변하여 DOM을 업데이트하는 절차
      1. 데이터 업데이트 시 전체 UI를 Virtual DOM에 리렌더링
      2. 이전 Virtual DOM에 있던 내용과 현재 내용을 비교
      3. 바뀐 부분만 실제 DOM에 적용 
   
즉, 지속적으로 데이터가 변화하는 대규모 애플리케이션 구축 시 효율적 
정적 페이지는 리액트가 없어도 된다 이말이죠

리액트는 뷰만 담당하는, 프레임 워크가 아닌, 라이브러리. -> 뷰만 신경쓰므로 다른 기능은 직접 구현해서 쓰시오