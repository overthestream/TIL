# 일반 CSS
  CSS 클래스를 중복되지 않게 이름짓기
  컴포넌트이름-클래스 이런 식의 규칙 
  or 
  CSS Selector 
    CSS 클래스 이름을 
    .컴포넌트명 .클래스명 
    .컴포넌트명 태그명 
    이런식으로 지으면 자동으로 중복없이 셀렉팅됨 
# Sass (Syntatically Awesome Style Shrrts)
  .sass (중괄호와 세미콜론 X) | .scss (CSS와 비슷) 
  사용시 리액트 디렉터리에서 yarn add node-ass 해야함 
  ex -> Sass.scss 
# CSS Module
  CSS Module은 CSS를 불러와서 사용할 때 클래스 이름을 고유한 값, 즉 [파일명]_[클래스명]_[해시값]형태로 자동으로 만들어서 컴포넌트 스타일 클래스 이름 중첩을 방지
# CSS-in_JS
  JS 파일 안에 스타일 선언 
  
# styled-components 
  $ yarn add styled-components
  CSS 분리 없이 JS파일 내에 스타일까지 작성 가능 !! + props 값을 쉽게 스타일에 적용 가능하다
  '''
  import styled, { css } from 'styled-components'
  
  const Box = styled.div`
    // props로 넣어준 값 직접 전달 가능
    background: ${props => props.color || 'blue'};
    padding: 1rem;
    display: flex;
  `
  (...)
  <Box color = "black">
  (...)
  </Box>
  (...)
  `를 사용하여 만든 문자열에 스타일 정보를 넣어줌 : Tagged 템플릿 리터럴 - 템플릿 안의 객체, 함수 값 등을 온전히 추출 가능한 템플릿 
  -> div 자리에 input 등 다른 태그 가능 
  이것은 새로운 스타일링 된 태그를 하나의 새로운 태그로 정의하는 것
  한 태그 자체에 스타일을 넣어주는 것도 가능 
  '''
  const myInput = styled('input')`
    background: gray;
  `
  ''' 
  이런 느낌 
  props를 받는게 가능하므로 조건부 스타일링을 간단하게 props로 처리 
  &: 를 이용하여 자기 자신 선택 가능 
  ex 
  &:hover 
  
  ${}로 감싼 함수 안에서 : 템플릿 이용 전 css` ` 이런식으로 css임을 명시해야 함
  
  반응형 스타일링 : 
  media 유틸 함수 
  const sizes = {
    desktop: 1024,
    tablet:768
  }
  const media = Object.keys(sizes).reduce((acc, label) => {
      acc[label] = (...argc) => css`
        @media (max-width: $sizes[label] / 16}e,) {
          ${css(...args)};
        }
    }`;
  return acc;
},{});

const Box = styled.div `
  ${media.desktop`width: 768px;`}
  ${media.tablet`width: 100%;`};
`;