# React App 분석 
   ./App.js

# JSX
   JSX는 JS의 확장 문법으로 브라우저에서 실행되기 전에 코드 번들링 시 바벨을 이용하여 일반 JS 형태로 변환됨
   ReactDOM.render = 컴포넌트를 페이지에 렌더링하는 함수, 첫 파라미터 : 페이지에 렌더링할 내용, 두번째 파라미터는 해당 JSX(첫 파라미터)를 렌더링할 document 내부 요소 (public/index.html의 id=root 인 요소에 렌더링됨
   function App 의 return 값 = JSX 문법 

# 문법
   컴포넌트 속의 요소는 무조건 부모 요소로 감싸야함. 즉 <></> <></> 이게 안된다.
   두 요소 이상은 하나로 감싸라 
   <>
      <></>
      <></>
   </>
   이렇게 
   #### DOM 트리를 만드는 것. 컴포넌트 변화를 빠르게 감지하기 위해 ####
   <div> 또는 <Fragment> (import {Fragment} from 'react') 로 보통 감싼다 
      Fragement는 생략 가능 : <> </> 이것도 된다 
   JSX 내부에서는 자바스크립트 표현식도 쓸 수가 있다. : JSX 내부에서 {} 로 감싸면 됨 !!
   ex>
      import React from 'react'

      function App() {
         const name = '리액트'
         return(
            <>
               <h1> hello {name} </h1>
               <h2> hi </h2>
            </>
         )
      }

      export default App
   var 보다는 let을 써라
   JSX 내부에서 if 사용 불가 -> 논리 연산자(삼항, &&, || -> 삼항연산자의 return 값 또는, JS의 논리연산자 값 평가 return) 쓸 것
   undefined를 함수 컴포넌트에서 반환하지 말 것 ! (null은 아무것도 렌더링 하지 않음 | undefined는 error(<div>로 감싸면 ㄱㅊ))

   style 적용도 가능 
   ex>
      import React from 'react'

      function App() {
         const name = '리액트'
         const style = {
            // backgroud-color 같이 -가 붙은 애는 camel case로 변경 -> backgroudColor
            backgroudColor : 'black',
            color: 'aqua',
            fontSize: '48px' 
         }
         return(
            <div style = {style // 여기에 중괄호 하나 더 해서 바로 대입도 가능 } >
               <h1> hello {name} </h1>
               <h2> hi </h2>
            </div>
         )
      }

   css class : className attribute 사용
   ex <div className = "react"></div>

   HTML 에서는 br, input 등의 태그는 닫지 않아도 됨 
   but JSX에서는 닫는다 -> <input /> 이렇게 바로 닫아도 됨 

   JSX 내부 주석 : {/**/}

